import "generic/utils.ccf"
import "generic/sysfs_opt.ccf"
import "generic/trigger.ccf"
import "cpu_governor/cluster_3.ccf"
import "thread/cpu_3_4_1.ccf"

config meta_data {
    name = "Snapdragon8Gen2"
    version = "v1.2.0"
    author = "chenzyadb"
}

config modules_switch {
    CpuGovernor.enable = true
    ThreadSchedOpt.enable = true
    MtkGpuGovernor.enable = false
    DevFreqTuner.enable = true
    Trigger.enable = true
    Thermal.enable = true
}

function init {
    disable_boosts()
    stune_opt()
    cpuctl_opt()
    system_proc_opt()
    cpuset_opt()
}

config CpuGovernor.model {
    clusters = [
        {
            coreNum = 3
            perfRatio = 120
            lowPowerFreq = 500
            optimumFreq = 1400
            modelType = "little-core"
            modelFreq = 2020
            modelPower = 500
        },
        {
            coreNum = 4
            perfRatio = 330
            lowPowerFreq = 600
            optimumFreq = 1800
            modelType = "medium-core"
            modelFreq = 2800
            modelPower = 1800
        },
        {
            coreNum = 1
            perfRatio = 460
            lowPowerFreq = 700
            optimumFreq = 2000
            modelType = "big-core"
            modelFreq = 3190
            modelPower = 3880
        }
    ]
}

function Trigger.hint.onNone {
    lib.set_property("cpu.boost", 0)
    lib.set_property("cpu.extra_margin", 0)
    lib.set_property("cpu.low_latency", false)
    lib.set_property("mtk_gpu.min_freq", 0)
    lib.set_property("mtk_gpu.boost", 0)
    lib.set_property("mtk_gpu.extra_margin", 0)
    lib.set_property("mtk_gpu.low_latency", false)
    lib.set_property("devfreq.ddr.min_freq", 0)
    lib.set_property("devfreq.gpu.min_freq", 0)
}

function Trigger.hint.onTap {
    lib.set_property("cpu.boost", 20)
    lib.set_property("cpu.extra_margin", 0)
    lib.set_property("cpu.low_latency", false)
    lib.set_property("mtk_gpu.min_freq", 0)
    lib.set_property("mtk_gpu.boost", 0)
    lib.set_property("mtk_gpu.extra_margin", 0)
    lib.set_property("mtk_gpu.low_latency", false)
    lib.set_property("devfreq.ddr.min_freq", 0)
    lib.set_property("devfreq.gpu.min_freq", 0)
}

function Trigger.hint.onSwipe {
    lib.set_property("cpu.boost", 0)
    lib.set_property("cpu.extra_margin", 10)
    lib.set_property("cpu.low_latency", false)
    lib.set_property("mtk_gpu.min_freq", 0)
    lib.set_property("mtk_gpu.boost", 0)
    lib.set_property("mtk_gpu.extra_margin", 0)
    lib.set_property("mtk_gpu.low_latency", false)
    lib.set_property("devfreq.ddr.min_freq", 0)
    lib.set_property("devfreq.gpu.min_freq", 0)
}

function Trigger.hint.onGesture {
    lib.set_property("cpu.boost", 20)
    lib.set_property("cpu.extra_margin", 10)
    lib.set_property("cpu.low_latency", false)
    lib.set_property("mtk_gpu.min_freq", 0)
    lib.set_property("mtk_gpu.boost", 0)
    lib.set_property("mtk_gpu.extra_margin", 0)
    lib.set_property("mtk_gpu.low_latency", false)
    lib.set_property("devfreq.ddr.min_freq", 1700)
    lib.set_property("devfreq.gpu.min_freq", 0)
}

function Trigger.hint.onHeavyload {
    lib.set_property("cpu.boost", 0)
    lib.set_property("cpu.extra_margin", 20)
    lib.set_property("cpu.low_latency", false)
    lib.set_property("mtk_gpu.min_freq", 0)
    lib.set_property("mtk_gpu.boost", 0)
    lib.set_property("mtk_gpu.extra_margin", 0)
    lib.set_property("mtk_gpu.low_latency", false)
    lib.set_property("devfreq.ddr.min_freq", 1700)
    lib.set_property("devfreq.gpu.min_freq", 0)
}

function Trigger.hint.onJank {
    lib.set_property("cpu.boost", 40)
    lib.set_property("cpu.extra_margin", 0)
    lib.set_property("cpu.low_latency", true)
    lib.set_property("mtk_gpu.min_freq", 0)
    lib.set_property("mtk_gpu.boost", 0)
    lib.set_property("mtk_gpu.extra_margin", 0)
    lib.set_property("mtk_gpu.low_latency", false)
    lib.set_property("devfreq.ddr.min_freq", 3600)
    lib.set_property("devfreq.gpu.min_freq", 0)
}

function Trigger.hint.onBigJank {
    lib.set_property("cpu.boost", 40)
    lib.set_property("cpu.extra_margin", 20)
    lib.set_property("cpu.low_latency", true)
    lib.set_property("mtk_gpu.min_freq", 0)
    lib.set_property("mtk_gpu.boost", 0)
    lib.set_property("mtk_gpu.extra_margin", 0)
    lib.set_property("mtk_gpu.low_latency", false)
    lib.set_property("devfreq.ddr.min_freq", 3600)
    lib.set_property("devfreq.gpu.min_freq", 0)
}

config Thermal.profile {
    interval = 1000
    resolution = 5
    matchRule = "*(soc|cluster|cpu|tsens_tz_sensor)*"
}

function Thermal.onTempChanged {
    cpuTemp = $0
    mode = get_scheduler_mode()
    
    lib.set_property("devfreq.ddr.max_freq", 10000)
    lib.set_property("mtk_gpu.max_freq", 10000)

    if (std.equals(mode, POWERSAVE_MODE)) {
        if (std.greater(cpuTemp, 90)) {
            lib.set_property("cpu.max_power", 2000)
            lib.set_property("devfreq.gpu.max_freq", 300)
        } else {
            lib.set_property("cpu.max_power", 5000)
            lib.set_property("devfreq.gpu.max_freq", 410)
        }
    } else if (std.equals(mode, BALANCE_MODE)) {
        if (std.greater(cpuTemp, 90)) {
            lib.set_property("cpu.max_power", 2000)
            lib.set_property("devfreq.gpu.max_freq", 300)
        } else if (std.greater(cpuTemp, 85)) {
            lib.set_property("cpu.max_power", 5000)
            lib.set_property("devfreq.gpu.max_freq", 410)
        } else {
            lib.set_property("cpu.max_power", 8000)
            lib.set_property("devfreq.gpu.max_freq", 480)
        }
    } else if (std.equals(mode, PERFORMANCE_MODE)) {
        if (std.greater(cpuTemp, 90)) {
            lib.set_property("cpu.max_power", 2000)
            lib.set_property("devfreq.gpu.max_freq", 300)
        } else if (std.greater(cpuTemp, 85)) {
            lib.set_property("cpu.max_power", 5000)
            lib.set_property("devfreq.gpu.max_freq", 410)
        } else if (std.greater(cpuTemp, 80)) {
            lib.set_property("cpu.max_power", 8000)
            lib.set_property("devfreq.gpu.max_freq", 480)
        } else {
            lib.set_property("cpu.max_power", 10000)
            lib.set_property("devfreq.gpu.max_freq", 550)
        }
    } else if (std.equals(mode, FAST_MODE)) {
        lib.set_property("cpu.max_power", 10000)
        lib.set_property("devfreq.gpu.max_freq", 720)
    }
}